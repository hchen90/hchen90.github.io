1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
4:I[415,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],"default"]
5:I[9243,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],""]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/283bb1ed86b49fd2.css","style"]
:HL["/_next/static/css/09ec4099fb721b31.css","style"]
:HL["/_next/static/css/09dfadb69bdaa005.css","style"]
:HL["/_next/static/css/54b9acc791aa599c.css","style"]
6:T4a2,
          function copyCode(button) {
            // Find the code element within the same wrapper
            const codeWrapper = button.closest('.code-block-wrapper');
            if (!codeWrapper) return;
            
            const codeElement = codeWrapper.querySelector('code');
            if (!codeElement) return;
            
            // Get the text content
            const text = codeElement.textContent;
            
            // Use the clipboard API to copy the text
            navigator.clipboard.writeText(text).then(() => {
              // Update the button state to show "Copied!"
              button.setAttribute('data-copy-state', 'copied');
              const buttonText = button.querySelector('.copy-button-text');
              if (buttonText) buttonText.textContent = 'Copied!';
              
              // Reset after 2 seconds
              setTimeout(() => {
                button.setAttribute('data-copy-state', 'copy');
                if (buttonText) buttonText.textContent = 'Copy';
              }, 2000);
            }).catch(err => {
              console.error('Failed to copy text: ', err);
            });
          }
          0:{"P":null,"b":"bvXmrLIJiTuq5pCczDHLW","p":"","c":["","post","enablesbonlinux",""],"i":false,"f":[[["",{"children":["post",{"children":[["id","enablesbonlinux","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/283bb1ed86b49fd2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/09ec4099fb721b31.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/09dfadb69bdaa005.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased relative","children":[["$","div",null,{"className":"fixed top-4 right-4 z-50","children":["$","a",null,{"href":"https://github.com/hchen90","target":"_blank","rel":"noopener noreferrer","className":"flex items-center justify-center p-2 bg-white rounded-full shadow-md hover:shadow-lg transition-shadow duration-300","title":"Visit my GitHub profile","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"24","height":"24","viewBox":"0 0 24 24","fill":"currentColor","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}]}]}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L4",null,{}],["$","$L5",null,{"id":"code-copy","children":"$6"}]]}]}]]}],{"children":["post",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","enablesbonlinux","c"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/54b9acc791aa599c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","Lz_jtrHTz3MZj2szU1oJR",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
15:I[9543,["874","static/chunks/874-e909718850e7282e.js","734","static/chunks/734-02ba314a893e68e9.js","47","static/chunks/47-b8631d93eb2d4d4a.js","925","static/chunks/app/post/%5B...id%5D/page-deb68fe2aa3692cd.js"],"default"]
16:T3fb3,<h2 id="概述">概述<a aria-hidden="true" tabindex="-1" href="#概述"><span class="anchor-link"> #</span></a></h2>
<p>Secure Boot 作为 UEFI 的一个选项，它可以被设置为开启或关闭 ( 有少数的计算机里面， Secure Boot 被设置为开启，却不存在关闭它的选项，但系统主板内置有 Windows 系统的公钥证书签名，使其只能加载 Windows ，其他系统一律不以加载，用户没有选项，不能关闭，还没法换系统，无法适用本博客介绍内容）。 Secure Boot 所需要的公钥证书被保存在计算机的主板的 FLASH 里面（注意不是磁盘里面哦），在主板的一小块 FLASH 里面保存着 PK ， KEK， db， dbx 的证书链，所以， <strong>在操作开始前请确保你的计算机 UEFI-BIOS 的 Secure Boot 能够被关闭，否则，发生操作失误，将导致证书不能匹配任何程序代码文件，而使主板拒绝加载任何程序代码文件，就会导致主板变砖</strong> (虽然它不是 BIOS ，但是许多人都这么称呼它为 UEFI-BIOS ，所以，这里也这么称呼其为 UEFI-BIOS) 。</p>
<p>这里说一下 Fedora 是如何做到在 Secure Boot 开启时加载的，它实际上是 Fedora 开源项目向微软公司购买签名达到的， Fedora 被系统的主板识别为和 Windows 一样的系统，这种购买行为在开源社区是不鼓励的，好处是 Fedora 几乎可以在任何可以加载 Windows 系统上被识别加载，即使该计算机硬件不能关闭 Secure Boot。</p>
<blockquote>
<p>本人只在 ThinkPad 测试成功，其他机器未曾实验过，不过仅从理论来看，应该也会成功。</p>
</blockquote>
<h2 id="工具">工具<a aria-hidden="true" tabindex="-1" href="#工具"><span class="anchor-link"> #</span></a></h2>
<p>以下工具是必不可少的：</p>
<ul>
<li>openssl</li>
<li>efitools</li>
<li>sbsigntools</li>
</ul>
<p>如果你是第三方编译好的软件包来安装的，可以忽略此步：</p>
<p>在用源代码编译 efitools 时，需要 Perl 的一个模块，名字为 <code>File Slurp</code>，在 <a href="http://www.cpan.org">cpan</a> 可以找到。</p>
<h2 id="预先准备">预先准备<a aria-hidden="true" tabindex="-1" href="#预先准备"><span class="anchor-link"> #</span></a></h2>
<p>开机进入系统的 UEFI-BIOS 页面，在安全页面里找到 Secure Boot 选项，先关掉 Secure Boot （如果没有关的话），再删除或清空所有证书文件，使机器从 <code>User Mode</code> 转到 <code>Setup Mode</code> 即为正常，如果这两步不能做到，可能影响到下面的步骤。</p>
<h2 id="步骤">步骤<a aria-hidden="true" tabindex="-1" href="#步骤"><span class="anchor-link"> #</span></a></h2>
<h3 id="概念介绍">概念介绍<a aria-hidden="true" tabindex="-1" href="#概念介绍"><span class="anchor-link"> #</span></a></h3>
<p>这里简要介绍 PK，KEK，db，dbx 和 <em>MOK</em> 的概念。</p>
<ul>
<li>
<p>Platform Key （PK） － <strong>PK 是用于在硬件平台层和硬件平台拥有者建立起的信任关系</strong> ，规定一个硬件平台只能被一个拥有者所拥有，即 <strong>PK 只能存在一个</strong> ，与拥有者相关的公钥被存储在 FLASH 里面的 PK 变量里面，同时，拥有者的私钥可以来对 PK， KEK， db， dbx 进行签名和管理。</p>
</li>
<li>
<p>Key Exchange Key (KEK) － <strong>KEK 是用于在硬件平台和操作系统之间建立信任关系</strong> ，KEK 的公钥可以在主板的 FLASH 存在多个不同项，即 <strong>KEK 可以存在多个</strong> ，每一项对应一种可以被启动的操作系统，同样，KEK 的私钥可以来对 db， dbx 进行签名和管理。</p>
</li>
<li>
<p>Database (db) － db 是用于对 <strong>被许可的 EFI 文件予以加载的数据签名库</strong> ，和 KEK 一样， <strong>db 的公钥可以存在很多项</strong> 。（在 UEFI 平台里面，操作系统加载文件就是一个 EFI 文件）</p>
</li>
<li>
<p>Database Excluded (dbx) - dbx 是一个 <strong>黑名单数据签名库</strong> ，只要谁的 EFI 签名在这，谁就被屏蔽掉， <strong>dbx 的公钥也可以存在很多项</strong> 。</p>
</li>
<li>
<p>Machine Owner Key (MOK) - MOK 的作用是等价于 db 的，但是它不是标准 Secure Boot 的内容，<code>PreLoader</code> 和 <code>Shim</code> 使用了 MOK 。</p>
</li>
</ul>
<h3 id="建立-pkkekdb-密钥对">建立 PK，KEK，db 密钥对<a aria-hidden="true" tabindex="-1" href="#建立-pkkekdb-密钥对"><span class="anchor-link"> #</span></a></h3>
<p>这里需要 Linux 系统中存在 <code>uuidgen</code>：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash"><span class="hljs-built_in">echo</span> $(uuidgen) >guid
</code></pre></div>
<blockquote>
<p><em>如果你不打算启动 Windows 系统，请忽略文中所有提及有关 Windows 系统的内容</em></p>
</blockquote>
<p>如果系统不存在 <code>uuidgen</code>，就随便写个 GUID 到那个 guid 文件里，然后把微软的 Owner GUID 写到另外一个文件里：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash"><span class="hljs-built_in">echo</span>  77fa9abd-0359-4d32-bd60-28f4e78f784b >ms-guid
</code></pre></div>
<p>建立密钥对：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">openssl req -new -x509 -newkey rsa:2048 -subj <span class="hljs-string">"/CN=Platform Key/"</span> -keyout PK.key -out PK.crt -days 3650 -nodes -sha256
</code></pre></div>
<p>上面的 <code>-subj</code> 的参数可以自己设置，参数 <code>-days</code> 是密钥的有效期，这里设置为 10 年，也可以设置为其他，生成私钥 <code>PK.key</code>，公钥 <code>PK.crt</code>。</p>
<p>同理，KEK 和 db 亦是如此：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">openssl req -new -x509 -newkey rsa:2048 -subj <span class="hljs-string">"/CN=Key Exchange Key/"</span> -keyout KEK.key -out KEK.crt -days 3650 -nodes -sha256
openssl req -new -x509 -newkey rsa:2048 -subj <span class="hljs-string">"/CN=Database/"</span> -keyout db.key -out db.crt -days 3650 -nodes -sha256
</code></pre></div>
<p><em>这里没有建立 dbx 的黑名单，因为暂时用不到这个，也没有黑名单签名文件，MOK 不通用，亦不讨论</em></p>
<h3 id="建立-efi-list-文件">建立 EFI List 文件<a aria-hidden="true" tabindex="-1" href="#建立-efi-list-文件"><span class="anchor-link"> #</span></a></h3>
<p>EFI List 文件其实就是公钥配以平台拥有者的 GUID 的文件:</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">cert-to-efi-sig-list -g $(<span class="hljs-built_in">cat</span> guid) PK.crt PK.esl
cert-to-efi-sig-list -g $(<span class="hljs-built_in">cat</span> guid) KEK.crt KEK.esl
cert-to-efi-sig-list -g $(<span class="hljs-built_in">cat</span> guid) db.crt db.esl
</code></pre></div>
<p>这样三个公钥就全变成 List 文件了。</p>
<p>为了能够也启动磁盘里的 Windows 系统，下载三个微软的公钥，一个 KEK，两个 db：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">curl -L http://go.microsoft.com/fwlink/?LinkID=321185 -o MSKEK.der
curl -L http://go.microsoft.com/fwlink/?LinkID=321192 -o MSdbWPCA.der
curl -L http://go.microsoft.com/fwlink/?LinkID=321194 -o MSdbUDSCA.der
</code></pre></div>
<p>微软的这三个公钥与这里使用的公钥格式不同，需要重新转换：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">openssl x509 -<span class="hljs-keyword">in</span> MSKEK.der -inform DER -out MSKEK.crt
openssl x509 -<span class="hljs-keyword">in</span> MSdbWPCA.der -inform DER -out MSdbWPCA.crt
openssl x509 -<span class="hljs-keyword">in</span> MSdbUDSCA.der -inform DER -out MSdbUDSCA.crt
</code></pre></div>
<p>同样需要转换成 List 文件，不过这里的 GUID 最好用微软 Owner GUID：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">cert-to-efi-sig-list -g $(<span class="hljs-built_in">cat</span> ms-guid) MSKEK.crt MSKEK.esl
cert-to-efi-sig-list -g $(<span class="hljs-built_in">cat</span> ms-guid) MSdbWPCA.crt MSdbWPCA.esl
cert-to-efi-sig-list -g $(<span class="hljs-built_in">cat</span> ms-guid) MSdbUDSCA.crt MSdbUDSCA.esl
</code></pre></div>
<p>在这里需要注意一下，在 ThinkPad 里面，第二次添加 KEK 时（加参数 <code>-a</code> ），会出现失败，我的解决方法是把那些 List 合并成一个 List 文件，即：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash"><span class="hljs-built_in">cat</span> KEK.esl MSKEK.esl >realKEK.esl
<span class="hljs-built_in">cat</span> db.esl MSdbWPCA.esl MSdbUDSCA.esl >realDB.esl
</code></pre></div>
<p>根据 efitools 的文档，这种 cat 操作是可以完成合并的。</p>
<h3 id="给-list-文件签名">给 List 文件签名<a aria-hidden="true" tabindex="-1" href="#给-list-文件签名"><span class="anchor-link"> #</span></a></h3>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">sign-efi-sig-list -k PK.key -c PK.crt PK PK.esl PK.esl.signed
sign-efi-sig-list -k PK.key -c PK.crt KEK realKEK.esl realKEK.esl.signed
sign-efi-sig-list -k KEK.key -c KEK.crt db realDB.esl realDB.esl.signed
</code></pre></div>
<p>上述中，平台拥有着的 Key 权限最高，可以对 PK 本身，和 KEK 签名，KEK 是建立操作系统和硬件平台之间的信任关系，它只用于对于 db 进行签名。</p>
<h3 id="给二进制的-efi-文件签名">给二进制的 EFI 文件签名<a aria-hidden="true" tabindex="-1" href="#给二进制的-efi-文件签名"><span class="anchor-link"> #</span></a></h3>
<p>这是密钥管理和签名的最后一步，我使用的 grub ，其他的比如 elilo 等等，同理。给 grub 的 EFI 文件签名：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">sbsign --key db.key --cert db.crt --output grubx64.efi.signed /boot/efi/EFI/slackware64/grub64.efi
</code></pre></div>
<p>可以不用给内核 <code>vmlinuz</code> 签名，毕竟 <code>vmlinuz</code> 不是硬件平台的启动 EFI 文件，不过给内核签名也没什么影响，如果想给内核签名类似于给 grub 签名，用 私钥 <code>db.key</code> 及对应的公钥 <code>db.crt</code> 对其签名，这里用的 db 是那个自己创建的 db ，即没有合并微软 db 的那个，合并了微软 db 的是 <strong>realDB</strong> 。</p>
<h3 id="写入-efivars">写入 efivars<a aria-hidden="true" tabindex="-1" href="#写入-efivars"><span class="anchor-link"> #</span></a></h3>
<p>到这里是整个过程的最后一步，首先必须保证系统的 <em>efivarfs</em> 被正确挂载，<code>ls</code> 一下 <code>/sys/firmware/efi/efivars/</code> 是否存在文件，有的系统默认挂载 <em>efivarfs</em> ，有的则不是（后续步骤需要切换至 root 用户）：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">mount -t efivarfs efivarfs /sys/firmware/efi/efivars/
</code></pre></div>
<p>再把那三个签过名的 List 文件写入主板：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">bash</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-bash">efi-updatevar -f PK.esl.signed PK
efi-updatevar -f realKEK.esl.signed KEK
efi-updatevar -f realDB.esl.signed db
</code></pre></div>
<blockquote>
<p>参考 <a href="http://www.linuxquestions.org">LinuxQuestions</a> 上的解决方案，使用了在 <code>efi-updatevar</code> 添加 <code>-a</code> 参数来表示添加，但是在 ThinkPad 上多次实验第二次皆以 <code>Operation not permitted</code> 的错误而中断，所以，合并 EFI List 文件即只需添加一次，就全部都被加上，无需再用 <code>-a</code> 来添加。上述的问题很难判断是密钥链的逻辑问题，还是硬件的保护机制，不过用合并这种方法，在 Secure Boot 下，Windows 和 Linux 都可以正常启动，看来没问题。</p>
</blockquote>
<p>所有操作都完成后，可以运行 <code>efi-readvar</code> 来查看添加结果。只要 <em>efivarfs</em> 仍然被挂载，即使在非 root 用户也可以查看。</p>
<h2 id="相关链接">相关链接<a aria-hidden="true" tabindex="-1" href="#相关链接"><span class="anchor-link"> #</span></a></h2>
<p><a href="https://docs.slackware.com/howtos:security:enabling_secure_boot">docs.slackware.com</a></p>
<p><a href="http://www.linuxquestions.org/questions/slackware-14/slackware64-14-1-uefi-booting-with-secure-boot-enabled-4175532990">linuxquesions.org</a></p>
<p><a href="https://www.howtogeek.com/175641/how-to-boot-and-install-linux-on-a-uefi-pc-with-secure-boot">howtogeek.com</a></p>
<p><a href="http://wiki.archlinux.org/index.php/Secure_Boot">archlinux.org</a></p>
<p><a href="http://www.pcworld.com/article/2951559/operating-systems/how-to-install-linux-on-a-pc-with-secure-boot-enabled.html">pcworld.com</a></p>7:["$","$L15",null,{"postData":{"id":"enablesbonlinux","contentHtml":"$16","title":"如何在 Linux 系统启用 UEFI 的 Secure Boot","date":"$D2017-09-02T00:17:02.000Z","updated":"$D2017-09-02T00:17:02.000Z","categories":["随笔"],"tags":["linux","uefi","openssl"]}}]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"如何在 Linux 系统启用 UEFI 的 Secure Boot"}],["$","meta","1",{"name":"description","content":"HCHEN90 博客"}],["$","link","2",{"rel":"alternate","type":"application/atom+xml","href":"https://hchen90.top/atom.xml"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
