1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
4:I[415,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],"default"]
5:I[9243,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],""]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/283bb1ed86b49fd2.css","style"]
:HL["/_next/static/css/09ec4099fb721b31.css","style"]
:HL["/_next/static/css/09dfadb69bdaa005.css","style"]
:HL["/_next/static/css/54b9acc791aa599c.css","style"]
6:T4a2,
          function copyCode(button) {
            // Find the code element within the same wrapper
            const codeWrapper = button.closest('.code-block-wrapper');
            if (!codeWrapper) return;
            
            const codeElement = codeWrapper.querySelector('code');
            if (!codeElement) return;
            
            // Get the text content
            const text = codeElement.textContent;
            
            // Use the clipboard API to copy the text
            navigator.clipboard.writeText(text).then(() => {
              // Update the button state to show "Copied!"
              button.setAttribute('data-copy-state', 'copied');
              const buttonText = button.querySelector('.copy-button-text');
              if (buttonText) buttonText.textContent = 'Copied!';
              
              // Reset after 2 seconds
              setTimeout(() => {
                button.setAttribute('data-copy-state', 'copy');
                if (buttonText) buttonText.textContent = 'Copy';
              }, 2000);
            }).catch(err => {
              console.error('Failed to copy text: ', err);
            });
          }
          0:{"P":null,"b":"bvXmrLIJiTuq5pCczDHLW","p":"","c":["","post","lz77compalgo",""],"i":false,"f":[[["",{"children":["post",{"children":[["id","lz77compalgo","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/283bb1ed86b49fd2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/09ec4099fb721b31.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/09dfadb69bdaa005.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased relative","children":[["$","div",null,{"className":"fixed top-4 right-4 z-50","children":["$","a",null,{"href":"https://github.com/hchen90","target":"_blank","rel":"noopener noreferrer","className":"flex items-center justify-center p-2 bg-white rounded-full shadow-md hover:shadow-lg transition-shadow duration-300","title":"Visit my GitHub profile","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"24","height":"24","viewBox":"0 0 24 24","fill":"currentColor","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}]}]}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L4",null,{}],["$","$L5",null,{"id":"code-copy","children":"$6"}]]}]}]]}],{"children":["post",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","lz77compalgo","c"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/54b9acc791aa599c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","mf2Rd8yXhuNofrPyydluM",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
15:I[9543,["874","static/chunks/874-e909718850e7282e.js","734","static/chunks/734-02ba314a893e68e9.js","47","static/chunks/47-b8631d93eb2d4d4a.js","925","static/chunks/app/post/%5B...id%5D/page-deb68fe2aa3692cd.js"],"default"]
16:T4226,<h1 id="lz77算法简介">LZ77算法简介<a aria-hidden="true" tabindex="-1" href="#lz77算法简介"><span class="anchor-link"> #</span></a></h1>
<p>LZ77算法是一种无损压缩算法，最早由两位以色列人于1977发表，它是一种典型的字典型压缩算法，目前几乎大多数的无损压缩算法都是基于这个LZ77算法，也就是在其基础上优化修改，此算法可以称得上是无损压缩算法界的鼻祖了。</p>
<blockquote>
<p>参考维基百科<a href="https://en.wikipedia.org/wiki/LZ77_and_LZ78">lz77</a></p>
</blockquote>
<h1 id="算法逻辑">算法逻辑<a aria-hidden="true" tabindex="-1" href="#算法逻辑"><span class="anchor-link"> #</span></a></h1>
<p>LZ77的算法核心就是一个滑动窗口，在滑动窗口里面搜索重复字节，并将匹配到的字节串用更短的字节串方式表示出来。</p>
<p>这里涉及到几个要素：</p>
<ul>
<li>滑动窗口缓冲区</li>
<li>滑窗的前部区域</li>
<li>滑窗的已编码区域</li>
</ul>
<h2 id="编码流程">编码流程<a aria-hidden="true" tabindex="-1" href="#编码流程"><span class="anchor-link"> #</span></a></h2>
<p>编码步骤：</p>
<ol>
<li>首先分配一块缓冲区域用来处理数据</li>
<li>初始的前部区域为空</li>
<li>初始的已编码区域也为空</li>
<li>加载的字节流到前部区域，是否最后一个字节，是则进行第8步，否则继续第5步</li>
<li>在已编码区域寻找匹配字节串，如果找到进行第6步，否则进行第7步</li>
<li>将匹配到的第一个字节的相对位置和长度，标记到已编码区域中，继续第4步</li>
<li>将前部区域的字节直接拷贝到已编码区域，继续第4步</li>
<li>编码结束</li>
</ol>
<p>编码图示：</p>
<p>当滑动窗口还没有处理数据时：</p>
<p><img src="/post/lz77compalgo/444d473374ac.png" alt="stepprecomp"></p>
<p>当滑动窗口开始处理数据时：</p>
<p><img src="/post/lz77compalgo/bbe2cf390348.png" alt="stepcomp"></p>
<p>当滑动窗口正在处理数据时：</p>
<p><img src="/post/lz77compalgo/c2b4e19aa15f.png" alt="stepcomping"></p>
<p>当数据快要处理完时：</p>
<p><img src="/post/lz77compalgo/a2b9a5ac780a.png" alt="stepcompfin"></p>
<p>整个过程如同字节流在这个滑动窗口的黑盒子里面流动过一样，然后，它被加工的数据是已经压缩的数据了。</p>
<blockquote>
<p>数据编码中，会涉及到如何标记数据，在lz77算法中是用2-3个字节来表示的，即：如果有两个自己是'\0'，则表示它是一个直译字节，是直接拷贝过来的字节，这两个'\0'后面的字节就是原始字节；否则，这两个字节是表示当前字节处应该填充的字节串应该在的相对位置和长度（你甚至可以为你自己的lz77编码器自定义数据标记方式）。</p>
</blockquote>
<h2 id="解码流程">解码流程<a aria-hidden="true" tabindex="-1" href="#解码流程"><span class="anchor-link"> #</span></a></h2>
<p>解码的过程是编码过程的逆过程。</p>
<p>解码步骤：</p>
<ol>
<li>
<p>字节流是否是最后字节，是则进行第5步，否则进行第2步</p>
</li>
<li>
<p>从字节流获取两个字节，如果是<code>\0x00\0x00</code>则进行第3步，否则进行第4步</p>
</li>
<li>
<p>将<code>\0x00\0x00</code>后面的一个字节复制到输出缓存区域，继续加载字节流，继续第1步</p>
</li>
<li>
<p>从两个字节的编码中得到在滑动窗口的相对偏移和内容长度，把偏移处的内容拷贝到当前输出缓存，继续第1步</p>
</li>
<li>
<p>解码结束</p>
</li>
</ol>
<blockquote>
<p>上面的输出缓存区域是指在字节处理位置处理过后的字节流存放的缓存区域就是输出缓存</p>
</blockquote>
<p>解码图示：</p>
<p>滑动窗口还没有输入数据的时候：</p>
<p><img src="/post/lz77compalgo/327cac22a173.png" alt="stepuncomp"></p>
<p>滑动窗口开始处理数据的时候：</p>
<p><img src="/post/lz77compalgo/0f3c09c33bfb.png" alt="stepuncomp"></p>
<p>数据在滑动窗口中处理：</p>
<p><img src="/post/lz77compalgo/44818fe4e513.png" alt="stepuncomping"></p>
<p>数据快要处理完的时候：</p>
<p><img src="/post/lz77compalgo/a0e2f344a5e9.png" alt="stepuncompfin"></p>
<h1 id="源码实现">源码实现<a aria-hidden="true" tabindex="-1" href="#源码实现"><span class="anchor-link"> #</span></a></h1>
<p>辅助函数：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">c</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search_maxlen_p</span><span class="hljs-params">( <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>**  pt, \
                              <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* head, \
                              <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* tail, \
                              <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* end)</span>
{
  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* tmp = *pt;
  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> leng = <span class="hljs-number">0</span>, i;

  <span class="hljs-keyword">for</span>(tmp;tmp >= head;tmp--){
    <span class="hljs-keyword">if</span>(tmp[<span class="hljs-number">0</span>] == tail[<span class="hljs-number">0</span>]){
      <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;(i &#x3C; ((<span class="hljs-number">1</span> &#x3C;&#x3C; LENGTHBITS) - <span class="hljs-number">1</span>)) &#x26;&#x26; (&#x26;tmp[i] > head) &#x26;&#x26; (&#x26;tmp[i] &#x3C; tail) &#x26;&#x26; (&#x26;tail[i] &#x3C; end) &#x26;&#x26; (tmp[i] == tail[i]);i++);
      <span class="hljs-keyword">if</span>(i > leng){
        leng = i;
        *pt = tmp;
      }
    }
  }
  <span class="hljs-keyword">return</span> leng;
}
</code></pre></div>
<p>编码实现：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">c</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-c"><span class="hljs-type">int</span> <span class="hljs-title function_">lz77_encode</span><span class="hljs-params">(FILE* in,FILE* out)</span>
{
  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* buf = <span class="hljs-number">0</span>,* head = <span class="hljs-number">0</span>,* tail = <span class="hljs-number">0</span>;
  <span class="hljs-type">long</span> size = <span class="hljs-number">0</span>;

  <span class="hljs-keyword">if</span>(! in || ! out)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;

  get_filesize(in,size); <span class="hljs-comment">// get file size.</span>
  <span class="hljs-keyword">if</span>(size &#x3C;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;

  buf = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(size* <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)); <span class="hljs-comment">// allocate memory.</span>
  <span class="hljs-keyword">if</span>(! buf)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;

  <span class="hljs-keyword">if</span>(fread(buf,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>),size,in) == size){
    head = tail = buf;
    fputc((size >> <span class="hljs-number">24</span>) &#x26; <span class="hljs-number">0xff</span>,out);
    fputc((size >> <span class="hljs-number">16</span>) &#x26; <span class="hljs-number">0xff</span>,out);
    fputc((size >>  <span class="hljs-number">8</span>) &#x26; <span class="hljs-number">0xff</span>,out);
    fputc((size >>  <span class="hljs-number">0</span>) &#x26; <span class="hljs-number">0xff</span>,out);

    <span class="hljs-keyword">for</span>(;;){ <span class="hljs-comment">// loop block.</span>
      head = tail - WINDOWSIZE;
      <span class="hljs-keyword">if</span>(buf  > head)head = buf;
      <span class="hljs-keyword">if</span>(tail > buf + size - <span class="hljs-number">1</span>)<span class="hljs-keyword">break</span>;
      <span class="hljs-keyword">if</span>(tail > head){
        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* pt = tail - <span class="hljs-number">1</span>;
        <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> bytes = <span class="hljs-number">0</span>;
        bytes = search_maxlen_p(&#x26;pt,head,tail,buf + size);
        <span class="hljs-comment">// search maximal matched bytes and position.</span>
        <span class="hljs-keyword">if</span>(bytes > <span class="hljs-number">0</span>){
          <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> chars[<span class="hljs-number">2</span>] = {<span class="hljs-number">0</span>};
          chars[<span class="hljs-number">0</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)(( (tail - pt) >> LENGTHBITS) &#x26; <span class="hljs-number">0xff</span>);
          chars[<span class="hljs-number">1</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>)((((tail - pt) &#x3C;&#x3C; LENGTHBITS) + bytes) &#x26; <span class="hljs-number">0xff</span>);
          fputc(chars[<span class="hljs-number">0</span>],out);
          fputc(chars[<span class="hljs-number">1</span>],out);
          <span class="hljs-comment">//fprintf(stderr,"{%d - %d}",tail - pt,bytes);</span>
          tail += bytes;
        } <span class="hljs-keyword">else</span> {
          fputc(<span class="hljs-number">0</span>,out);
          fputc(<span class="hljs-number">0</span>,out);
          fputc(*tail,out);
          tail++;
        }
      } <span class="hljs-keyword">else</span> {
        fputc(<span class="hljs-number">0</span>,out);
        fputc(<span class="hljs-number">0</span>,out);
        fputc(*tail,out);
        tail++;
      }
    }

  }

  <span class="hljs-built_in">free</span>(buf);
  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre></div>
<p>解码实现：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">c</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-c"><span class="hljs-type">int</span> <span class="hljs-title function_">lz77_decode</span><span class="hljs-params">(FILE* in,FILE* out)</span>
{
  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* nbuf = <span class="hljs-number">0</span>,* ori_buf = <span class="hljs-number">0</span>,* head = <span class="hljs-number">0</span>,* tail = <span class="hljs-number">0</span>;
  <span class="hljs-type">long</span> ori_size = <span class="hljs-number">0</span>,nsize = <span class="hljs-number">0</span>;

  <span class="hljs-keyword">if</span>(! in || ! out)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;

  get_filesize(in,nsize); <span class="hljs-comment">// get file size.</span>
  <span class="hljs-keyword">if</span>(nsize &#x3C;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;

  ori_size  = (fgetc(in) &#x26; <span class="hljs-number">0xff</span>) &#x3C;&#x3C; <span class="hljs-number">24</span>;
  ori_size += (fgetc(in) &#x26; <span class="hljs-number">0xff</span>) &#x3C;&#x3C; <span class="hljs-number">16</span>;
  ori_size += (fgetc(in) &#x26; <span class="hljs-number">0xff</span>) &#x3C;&#x3C;  <span class="hljs-number">8</span>;
  ori_size += (fgetc(in) &#x26; <span class="hljs-number">0xff</span>) &#x3C;&#x3C;  <span class="hljs-number">0</span>;
  <span class="hljs-keyword">if</span>(ori_size &#x3C;= <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;

  nbuf = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(nsize* <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>));
  <span class="hljs-keyword">if</span>(! nbuf)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;

  ori_buf = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(ori_size* <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>));
  <span class="hljs-keyword">if</span>(ori_buf){
    head = tail = ori_buf; <span class="hljs-comment">// store head and tail of slide-window.</span>

    <span class="hljs-keyword">if</span>(fread(nbuf,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>),nsize,in) == (nsize - <span class="hljs-number">4</span>)){
      <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>* pt  = nbuf;

      <span class="hljs-keyword">for</span>(;;){
        <span class="hljs-keyword">if</span>(pt >= (nbuf + nsize - <span class="hljs-number">4</span>))<span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">if</span>(! pt[<span class="hljs-number">0</span>] &#x26;&#x26; ! pt[<span class="hljs-number">1</span>] ){ <span class="hljs-comment">// \0\0\?</span>
          tail[<span class="hljs-number">0</span>] = pt[<span class="hljs-number">2</span>];
          tail++;
          pt += <span class="hljs-number">3</span>;
        } <span class="hljs-keyword">else</span> { <span class="hljs-comment">// \?\?</span>
          <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> offset = <span class="hljs-number">0</span>,length = <span class="hljs-number">0</span>,i;
          offset  =  pt[<span class="hljs-number">0</span>] &#x3C;&#x3C; LENGTHBITS;
          offset += (pt[<span class="hljs-number">1</span>] >> LENGTHBITS) &#x26; <span class="hljs-number">0x0f</span>;
          length  =  pt[<span class="hljs-number">1</span>] &#x26; <span class="hljs-number">0x0f</span>;
          <span class="hljs-comment">//fprintf(stderr,"{%d - %d}",offset,length);</span>
          <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &#x3C; length;i++){
            tail[i] = ((<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>*)(tail - offset))[i];
          }
          tail += length;
          pt += <span class="hljs-number">2</span>;
        }
      }
      fwrite(ori_buf,<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>),ori_size,out);
    }

    <span class="hljs-built_in">free</span>(ori_buf);
  }

  <span class="hljs-built_in">free</span>(nbuf);
  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
}
</code></pre></div>
<h1 id="算法分析">算法分析<a aria-hidden="true" tabindex="-1" href="#算法分析"><span class="anchor-link"> #</span></a></h1>
<p>在分析此算法压缩的数据效率如何时，可以看到和数据的内容有关，若重复率比较高，而且间隔距离短的内容，可以得到比较理想的压缩率，但是对于重复率低的内容就不一定能达到理想的压缩率，最差的情况就是，要压缩的内容刚刚好在滑动窗口大小的缓存都没有重复内容，那么压缩出来的数据不仅没有变小，而且增大到原来的3倍。</p>
<p>下图中的数据可以看到前面部分的非重复的数据就有许多的<code>"\0x00\0x00"</code>开头的直译复制过来的数据，这种数据过多就会导致压缩效率低下。</p>
<p><img src="/post/lz77compalgo/0ae608b93872.png" alt="hexdat"></p>
<p>一般来说，用LZ77算法压缩过的数据，为了抵消上面的劣势，可以将用LZ77压缩的数据再用哈夫曼编码再次编码，这样输出的数据压缩效率就高一些了。</p>
<p>链接：<a href="https://github.com/hchen90/lz77">Github上的代码</a></p>7:["$","$L15",null,{"postData":{"id":"lz77compalgo","contentHtml":"$16","title":"LZ77压缩算法","date":"$D2018-03-31T20:38:24.000Z","updated":"$D2018-03-31T20:38:24.000Z","categories":["算法"],"tags":["lz77","algorithm"]}}]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"LZ77压缩算法"}],["$","meta","1",{"name":"description","content":"HCHEN90 博客"}],["$","link","2",{"rel":"alternate","type":"application/atom+xml","href":"https://hchen90.top/atom.xml"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
