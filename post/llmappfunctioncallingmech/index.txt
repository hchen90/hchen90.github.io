1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
4:I[415,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],"default"]
5:I[9243,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],""]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/283bb1ed86b49fd2.css","style"]
:HL["/_next/static/css/09ec4099fb721b31.css","style"]
:HL["/_next/static/css/09dfadb69bdaa005.css","style"]
:HL["/_next/static/css/54b9acc791aa599c.css","style"]
6:T4a2,
          function copyCode(button) {
            // Find the code element within the same wrapper
            const codeWrapper = button.closest('.code-block-wrapper');
            if (!codeWrapper) return;
            
            const codeElement = codeWrapper.querySelector('code');
            if (!codeElement) return;
            
            // Get the text content
            const text = codeElement.textContent;
            
            // Use the clipboard API to copy the text
            navigator.clipboard.writeText(text).then(() => {
              // Update the button state to show "Copied!"
              button.setAttribute('data-copy-state', 'copied');
              const buttonText = button.querySelector('.copy-button-text');
              if (buttonText) buttonText.textContent = 'Copied!';
              
              // Reset after 2 seconds
              setTimeout(() => {
                button.setAttribute('data-copy-state', 'copy');
                if (buttonText) buttonText.textContent = 'Copy';
              }, 2000);
            }).catch(err => {
              console.error('Failed to copy text: ', err);
            });
          }
          0:{"P":null,"b":"bvXmrLIJiTuq5pCczDHLW","p":"","c":["","post","llmappfunctioncallingmech",""],"i":false,"f":[[["",{"children":["post",{"children":[["id","llmappfunctioncallingmech","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/283bb1ed86b49fd2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/09ec4099fb721b31.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/09dfadb69bdaa005.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased relative","children":[["$","div",null,{"className":"fixed top-4 right-4 z-50","children":["$","a",null,{"href":"https://github.com/hchen90","target":"_blank","rel":"noopener noreferrer","className":"flex items-center justify-center p-2 bg-white rounded-full shadow-md hover:shadow-lg transition-shadow duration-300","title":"Visit my GitHub profile","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"24","height":"24","viewBox":"0 0 24 24","fill":"currentColor","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}]}]}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L4",null,{}],["$","$L5",null,{"id":"code-copy","children":"$6"}]]}]}]]}],{"children":["post",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","llmappfunctioncallingmech","c"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/54b9acc791aa599c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","OrxaayuVRoC4r5BlboSDD",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
15:I[9543,["874","static/chunks/874-e909718850e7282e.js","734","static/chunks/734-02ba314a893e68e9.js","47","static/chunks/47-b8631d93eb2d4d4a.js","925","static/chunks/app/post/%5B...id%5D/page-deb68fe2aa3692cd.js"],"default"]
16:T6c51,<h1 id="llm应用中的function-calling机制">LLM应用中的Function Calling机制<a aria-hidden="true" tabindex="-1" href="#llm应用中的function-calling机制"><span class="anchor-link"> #</span></a></h1>
<p>LLM在当下应用非常广泛，从最常见的聊天问答（例如：Chatgpt，DeekSeek聊天），到基于内容检索的问答系统，处处可见它的身影。</p>
<p>在LLM（大型语言模型）应用开发中，<strong>Function Calling</strong>（函数调用）是一项强大的机制，它使得大模型不再局限于单纯的文本生成，而是能够与外部世界进行更深层次的交互。通过这种机制，我们可以赋予LLM调用特定工具或API的能力，从而解锁无数复杂且实用的应用场景。</p>
<h2 id="什么是function-calling">什么是Function Calling<a aria-hidden="true" tabindex="-1" href="#什么是function-calling"><span class="anchor-link"> #</span></a></h2>
<p>简单来说，Function Calling是一种让LLM模型理解并生成特定结构化数据（JSON格式），以触发外部函数或工具的能力。你不是直接让模型执行某个操作，而是告诉它“当用户想要做某件事时，请返回给我一个带有特定参数的函数名”。之后，你的应用代码会接收这个“函数调用”的指令，并负责真正去执行这个函数。</p>
<p>从定义来说，Function Calling是模型生成一个结构化数据来触发外部函数。</p>
<p>大体的工作流如下：</p>
<ol>
<li>开发者提供函数描述（Schema）给LLM。</li>
<li>用户输入触发了某个函数的需求。</li>
<li>LLM根据函数描述生成一个包含函数名和参数的JSON对象。</li>
<li>开发者应用代码解析并执行这个函数。</li>
</ol>
<h2 id="为什么需要function-calling">为什么需要Function Calling<a aria-hidden="true" tabindex="-1" href="#为什么需要function-calling"><span class="anchor-link"> #</span></a></h2>
<p>如果没有Function Calling，LLM只能回答它“知道”的信息，比如“今天天气怎么样？”。它可能会生成一段关于天气的描述，但这并不能真正告诉你实时的天气情况。</p>
<h3 id="llm存在的不足">LLM存在的不足<a aria-hidden="true" tabindex="-1" href="#llm存在的不足"><span class="anchor-link"> #</span></a></h3>
<p>LLM的Function Calling机制是解决LLM存在的不足。</p>
<h4 id="知识库的静态性">知识库的静态性<a aria-hidden="true" tabindex="-1" href="#知识库的静态性"><span class="anchor-link"> #</span></a></h4>
<p>LLM本身是基于大量知识训练而成的，但是它的知识库却是静态的，它不能获取当前时间上海的天气情况。</p>
<h4 id="模型能力有限">模型能力有限<a aria-hidden="true" tabindex="-1" href="#模型能力有限"><span class="anchor-link"> #</span></a></h4>
<p>仍然以上面的例子说明，获取到的天气情况，如果我们想把它保存，LLM不能帮我们把它存储到数据库，用于以后分析使用。</p>
<h4 id="模型输出内容可靠性有限">模型输出内容可靠性有限<a aria-hidden="true" tabindex="-1" href="#模型输出内容可靠性有限"><span class="anchor-link"> #</span></a></h4>
<p>LLM一直都存在“幻想”问题，如果不能结合具体场景，它的回复内容可能也是不准确的，例如：让它推测API使用，并没有给出具体格式下，它给出的内容可能不是正确的。</p>
<h2 id="如何实现一个简单的function-calling应用">如何实现一个简单的Function Calling应用<a aria-hidden="true" tabindex="-1" href="#如何实现一个简单的function-calling应用"><span class="anchor-link"> #</span></a></h2>
<p>为了展示一个实现Function Calling应用实例，这里我选择了OpenRouter作为LLM云端，它适配了大量LLM供应商，模型选择比较方便。</p>
<p>这里需要注意一点，在OpenRouter上有大量的模型可用，还有很多都是免费的，如果要使用Function Calling机制，不管是免费的还是收费的模型，都要先查看一下它是否支持Function Calling机制，可以打开页面左侧的筛选（筛选支持Tools）。</p>
<p><img src="/post/llmappfunctioncallingmech/1c3a72fe6c9d.png" alt="openrouter_filter_tools"></p>
<p>我这里使用了DeepSeek V3.1模型进行演示，然后示例一个统计站点拨款文章数量的外部Function Calling，这里我们分布进行详细调用流程：</p>
<h4 id="步骤一定义函数tool-definition"><strong>步骤一：定义函数（Tool Definition）</strong><a aria-hidden="true" tabindex="-1" href="#步骤一定义函数tool-definition"><span class="anchor-link"> #</span></a></h4>
<p>定义函数的目的是告诉LLM，本LLM应用支持哪些外部的Function Calling，实际就是创建外部函数的JSON Schema，并放入LLM的请求参数中。</p>
<p>如下示例：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">json</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"model"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"deepseek/deepseek-chat-v3-0324"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"tools"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"function"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"function"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"count_of_articles"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Return of total count of blog articles in the website"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"parameters"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                    <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"object"</span><span class="hljs-punctuation">,</span>
                    <span class="hljs-attr">"properties"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span><span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
                    <span class="hljs-attr">"required"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span>
                <span class="hljs-punctuation">}</span>
            <span class="hljs-punctuation">}</span>
        <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"messages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
      <span class="hljs-comment">// ...</span>
     <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span>
</code></pre></div>
<p>这个示例是定义了一个统计博客站点一共有多少篇文章的外部函数。LLM获取到tools中定义的外部函数时，就会解析它其中提供的函数，对于函数的用法，什么含义，是通过参数<code>description</code>，<code>parameters</code>来指定。</p>
<h4 id="步骤二调用llm-api">步骤二：调用LLM API<a aria-hidden="true" tabindex="-1" href="#步骤二调用llm-api"><span class="anchor-link"> #</span></a></h4>
<p>在JSON中定义好函数后，我们就需要把它作为请求发送给LLM，此外我们需要把我们的文本请求发在<code>messages</code>中，例如：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">json</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-comment">// ...</span>
  <span class="hljs-attr">"messages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"system"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"你是AI助手，负责回答回答用户一些问题，便于用户快速获取博客文章的信息。告诉用户使用次数较多时，将会引发限制。"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"user"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"站点有多少篇文章？"</span>
        <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span>
</code></pre></div>
<p>添加完上述请求后，就可以把整个请求发送给LLM了。</p>
<h4 id="步骤三解析并执行函数">步骤三：解析并执行函数<a aria-hidden="true" tabindex="-1" href="#步骤三解析并执行函数"><span class="anchor-link"> #</span></a></h4>
<p>LLM处理上述请求时，发现关于文章数量统计的有一个外部Function Calling，于是它返回的结果是如下：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">json</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"gen-1750571355-aHglwd9IFp4rXZs92i"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"provider"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Novita"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"model"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"deepseek/deepseek-chat-v3-0324"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"object"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"chat.completion"</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"created"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1750571355</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">"choices"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"logprobs"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"finish_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tool_calls"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"native_finish_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tool_calls"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"index"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"assistant"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">""</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"refusal"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"reasoning"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"tool_calls"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
                    <span class="hljs-punctuation">{</span>
                        <span class="hljs-attr">"index"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
                        <span class="hljs-attr">"id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"call_7gp5viqwa4lku1jy1xep1tfw"</span><span class="hljs-punctuation">,</span>
                        <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"function"</span><span class="hljs-punctuation">,</span>
                        <span class="hljs-attr">"function"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                            <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"count_of_articles"</span><span class="hljs-punctuation">,</span>
                            <span class="hljs-attr">"arguments"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"{}"</span>
                        <span class="hljs-punctuation">}</span>
                    <span class="hljs-punctuation">}</span>
                <span class="hljs-punctuation">]</span>
            <span class="hljs-punctuation">}</span>
        <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-comment">// ...</span>
<span class="hljs-punctuation">}</span>
</code></pre></div>
<p>它会返回assistant角色的<code>tool_calls</code>请求，请求包含请求的外部函数名（<code>function.name</code>）和参数（<code>function.arguments</code>），同时需要注意这里的<code>tool_calls.id</code>，它在后面需要用到。</p>
<h4 id="步骤四将函数执行结果反馈给llm">步骤四：将函数执行结果反馈给LLM<a aria-hidden="true" tabindex="-1" href="#步骤四将函数执行结果反馈给llm"><span class="anchor-link"> #</span></a></h4>
<p>当我们获取到了LLM返回外部函数Function Calling时，我们通过返回的函数请求去执行外部函数并把结果添加到消息体中。</p>
<blockquote>
<p>外部函数</p>
<p>这里的外部函数可以是本地执行的函数，查找或执行一项本地事务，但是也可以是远程的一个接口函数哦，通过远程API Key形式来获取远程事务的结果。</p>
</blockquote>
<p>这里假如说我们的站点博客外部函数最终统计出了232篇文章，那么我们需要再把统计结果放入消息体中，如下：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">json</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-comment">// ...</span>
    <span class="hljs-attr">"messages"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"system"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"你是AI助手，负责回答回答用户一些问题，便于用户快速获取博客文章的信息。告诉用户使用次数较多时，将会引发限制。"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"user"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"站点有多少篇文章？"</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"tool"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"tool_call_id"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"call_7gp5viqwa4lku1jy1xep1tfw"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"count_of_articles"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"232"</span>
        <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span>
</code></pre></div>
<p>添加的消息角色是<code>tool</code>，同时指定tool_id（<code>tool_call_id</code>），和函数名与结果。然后再把这个请求发送给LLM，LLM最终会给出自然语言级别的回复，如下：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">json</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-comment">// ...</span>
    <span class="hljs-attr">"choices"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"logprobs"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"finish_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stop"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"native_finish_reason"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"stop"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"index"</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"message"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                <span class="hljs-attr">"role"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"assistant"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"content"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"目前站点共有232篇文章。如果查询次数较多，可能会触发限制，请注意合理使用。"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"refusal"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"reasoning"</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">null</span></span>
            <span class="hljs-punctuation">}</span>
        <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
<span class="hljs-punctuation">}</span>
</code></pre></div>
<p>到这里我们完成了一个整体的Function Calling调用机制，在实际应用中，还有更多的玩法。</p>
<h2 id="高级应用与最佳实践">高级应用与最佳实践<a aria-hidden="true" tabindex="-1" href="#高级应用与最佳实践"><span class="anchor-link"> #</span></a></h2>
<p>关于Function Calling的使用，上述至少演示了一个简单的单个外部示例，根据实际应用场景还有更复杂的玩法。</p>
<h3 id="多工具调用multi-tool-calling">多工具调用（Multi-tool Calling）<a aria-hidden="true" tabindex="-1" href="#多工具调用multi-tool-calling"><span class="anchor-link"> #</span></a></h3>
<p>注意到上述只定义了一个外部函数（统计博客数量），实际应用可能不止这一个函数，可能是多个功能各异的外部函数，提供给LLM使用。</p>
<p>和简单示例相比，多工具下只是定义函数上不同，其他基本没有太大的改变，如下是定义多个外部工具函数：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">json</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
    <span class="hljs-comment">// ...</span>
    <span class="hljs-attr">"tools"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"function"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"function"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"count_of_articles"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Return of total count of blog articles in the website"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"parameters"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                    <span class="hljs-comment">// ...</span>
                <span class="hljs-punctuation">}</span>
            <span class="hljs-punctuation">}</span>
        <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
        <span class="hljs-punctuation">{</span>
            <span class="hljs-attr">"type"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"function"</span><span class="hljs-punctuation">,</span>
            <span class="hljs-attr">"function"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                <span class="hljs-attr">"name"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"search_article"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"description"</span><span class="hljs-punctuation">:</span> <span class="hljs-string">"Search a specific article by the content"</span><span class="hljs-punctuation">,</span>
                <span class="hljs-attr">"parameters"</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
                    <span class="hljs-comment">// ...</span>
                <span class="hljs-punctuation">}</span>
            <span class="hljs-punctuation">}</span>
        <span class="hljs-punctuation">}</span>
    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
    <span class="hljs-comment">// ...</span>
<span class="hljs-punctuation">}</span>
</code></pre></div>
<p>看起来是不是很简单，对于定义了多个外部工具函数的情况，LLM是会自动选择正确函数的（主要通过函数描述来判断的，所以函数描述不要随便乱写）。</p>
<h3 id="链式调用chaining">链式调用（Chaining）<a aria-hidden="true" tabindex="-1" href="#链式调用chaining"><span class="anchor-link"> #</span></a></h3>
<p>链式调用是一个比较热门的技术风格，它把和LLM对话的每次会话抽象为一个会话事务，这样每个会话事务是为了解决一个问题的其中一个步骤（这样的方式下，就可以缓解LLM的Token数量限制问题，同时也符合问题分解的思维方式），把这些事务步骤连成一条链就是解决一个复杂问题的解决方案。</p>
<blockquote>
<p>LangChain</p>
<p>LangChain是一个专门为实现和管理“链式调用”而设计的框架，它是开源的，它实现了一整套的调用工具箱，非常适合上手。</p>
</blockquote>
<p>关于链式调用，我可以举例说明一个，比方说做一个小说内容总结系统，对于传统意义上，只在一个LLM会话上，一篇小说当然无法塞进去的，所以需要使用问题分解的思路，比方说定义一些外部函数：</p>
<ul>
<li>统计有哪些章节</li>
<li>统计章节内容大小，并分段总结段内容</li>
<li>汇总章节内容</li>
<li>汇总整篇小说内容</li>
</ul>
<p>图示流程如下：
<img src="/post/llmappfunctioncallingmech/ebd0ff9ba8e7.png" alt="langchain"></p>
<blockquote>
<p>LangChain的改进</p>
<p>对于LangChain的问题，那就是它是顺序化，对于复杂问题难免导致链过长的问题，于是又有了LangGraph的技术方案，LangGraph的主要特点就是把能够可以并行执行的事物并行执行，这样可以更快地获取的问题的答案，但是它也带来了系统的复杂性。</p>
</blockquote>
<h2 id="总结与展望">总结与展望<a aria-hidden="true" tabindex="-1" href="#总结与展望"><span class="anchor-link"> #</span></a></h2>
<p>LLM的Function Calling提供了允许LLM调用外部函数的能力，使它能够和外部世界更好地互动。它是与外部世界连接的桥梁，在AI智能体，和自动化领域有非常广阔的情景，未来这方面的技术将会持续迭代与演进。</p>7:["$","$L15",null,{"postData":{"id":"llmappfunctioncallingmech","contentHtml":"$16","title":"LLM应用中的Function Calling机制","date":"$D2025-04-20T02:12:08.000Z","updated":"$D2016-09-20T02:12:08.000Z","categories":["随笔"],"tags":["AI","人工智能","LLM"]}}]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"LLM应用中的Function Calling机制"}],["$","meta","1",{"name":"description","content":"HCHEN90 博客"}],["$","link","2",{"rel":"alternate","type":"application/atom+xml","href":"https://hchen90.top/atom.xml"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
