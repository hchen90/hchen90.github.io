1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
4:I[415,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-07bb40856ea7a35b.js"],"default"]
5:I[9243,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-07bb40856ea7a35b.js"],""]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/283bb1ed86b49fd2.css","style"]
:HL["/_next/static/css/09ec4099fb721b31.css","style"]
:HL["/_next/static/css/09dfadb69bdaa005.css","style"]
:HL["/_next/static/css/54b9acc791aa599c.css","style"]
6:T4a2,
          function copyCode(button) {
            // Find the code element within the same wrapper
            const codeWrapper = button.closest('.code-block-wrapper');
            if (!codeWrapper) return;
            
            const codeElement = codeWrapper.querySelector('code');
            if (!codeElement) return;
            
            // Get the text content
            const text = codeElement.textContent;
            
            // Use the clipboard API to copy the text
            navigator.clipboard.writeText(text).then(() => {
              // Update the button state to show "Copied!"
              button.setAttribute('data-copy-state', 'copied');
              const buttonText = button.querySelector('.copy-button-text');
              if (buttonText) buttonText.textContent = 'Copied!';
              
              // Reset after 2 seconds
              setTimeout(() => {
                button.setAttribute('data-copy-state', 'copy');
                if (buttonText) buttonText.textContent = 'Copy';
              }, 2000);
            }).catch(err => {
              console.error('Failed to copy text: ', err);
            });
          }
          0:{"P":null,"b":"ppQBZ_hjs78de-RY41wpR","p":"","c":["","post","jnithreadsafe",""],"i":false,"f":[[["",{"children":["post",{"children":[["id","jnithreadsafe","d"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/283bb1ed86b49fd2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/09ec4099fb721b31.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/09dfadb69bdaa005.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased relative","children":[["$","div",null,{"className":"fixed top-4 right-4 z-50","children":["$","a",null,{"href":"https://github.com/hchen90","target":"_blank","rel":"noopener noreferrer","className":"flex items-center justify-center p-2 bg-white rounded-full shadow-md hover:shadow-lg transition-shadow duration-300","title":"Visit my GitHub profile","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"24","height":"24","viewBox":"0 0 24 24","fill":"currentColor","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}]}]}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L4",null,{}],["$","$L5",null,{"id":"code-copy","children":"$6"}]]}]}]]}],{"children":["post",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["id","jnithreadsafe","d"],["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/54b9acc791aa599c.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","QUyBveXcjc2wLGBN2icjb",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
15:I[9543,["874","static/chunks/874-e909718850e7282e.js","734","static/chunks/734-02ba314a893e68e9.js","47","static/chunks/47-c7e96c4c4bac7987.js","457","static/chunks/app/post/%5Bid%5D/page-203b57796d94b5ec.js"],"default"]
16:T36eb,<h1 id="jni-开发是什么">JNI 开发是什么<a aria-hidden="true" tabindex="-1" href="#jni-开发是什么"><span class="anchor-link"> #</span></a></h1>
<p>因本人以前工作中做过此类工作，再加上老同事的疑问，所以，今天抽出时间来探讨一下JNI的开发问题和特定细节（调用的线程安全问题），其实这种JNI层调用和任何其他语言调用C/C++层结构都差不多，比如说CGO，其涉及到Golang和C/C++层的调用，很多方面都存在类似之处。</p>
<p>JNI开发是使用Java提供的本地化接口，比如C/C++（也可以是其他语言），允许Java虚拟机里面的已经编译的代码和外界的本地化代码进行交互。</p>
<blockquote>
<p>因为Java是推崇平台可移植性的，本地化代码看起来破坏了可移植性，但是很多时候却是不可避免的，因为很多时候Java是无法实现一些比较底层功能的。</p>
</blockquote>
<h1 id="jni开发需要哪些工具">JNI开发需要哪些工具<a aria-hidden="true" tabindex="-1" href="#jni开发需要哪些工具"><span class="anchor-link"> #</span></a></h1>
<p>在我的机器里面是安装的OpenJDK11和GCC11，运行平台是Linux环境，为了提高编码效率，我使用的是VSCode，外加Java插件，CMake插件和C++插件。</p>
<p>这里列举一下工具链：</p>
<ul>
<li>OpenJDK 11</li>
<li>GCC 11</li>
<li>CMake 3.21</li>
<li>VSCode 最新版</li>
</ul>
<p>截图：</p>
<p><img src="/post/jnithreadsafe/8025a99f2589.png" alt="vscode"></p>
<blockquote>
<p>关于OpenJDK为何找不到javah，可以参考<a href="http://openjdk.java.net/jeps/313">这里</a>，意思就是javah已经被移除了，现在可以通过javac来完成同样的操作：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">shell</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-shell">javac -cp . -h abc MyCls.java
</code></pre></div>
<p>以上假设在当前目录的MyCls.java存在本地调用，它会在当前目录下创建一个abc目录，并且写入C++层的JNI调用头文件，你只需要在写一个和之对应的C++源代码即可。</p>
</blockquote>
<h1 id="术语解释">术语解释<a aria-hidden="true" tabindex="-1" href="#术语解释"><span class="anchor-link"> #</span></a></h1>
<p>其实<strong>线程安全</strong>是什么意思都可以通过搜索找到，也许你已经知道什么意思，不过这里不妨碍我再叙述一遍：</p>
<p>线程安全是指某个函数在多线程的环境下被多次调用时，能够使得多线程的每个调用者都可以得到自己想要的正确结果。</p>
<h1 id="主要因素">主要因素<a aria-hidden="true" tabindex="-1" href="#主要因素"><span class="anchor-link"> #</span></a></h1>
<p>产生线程安全问题的原因是因为<strong>函数调用需要对公共变量进行修改</strong></p>
<p>这会涉及到四种情形：</p>
<ul>
<li>静态Java本地调用改C++层的公共数据</li>
<li>静态Java本地调用改Java层的公共数据</li>
<li>动态Java本地调用改C++层的公共数据</li>
<li>动态Java本地调用改Java层的公共数据</li>
</ul>
<p>所以说只要涉及到公共数据都会产生线程安全的问题。</p>
<blockquote>
<p>至于什么是静态/动态Java本地调用？区别就是对应本地调用是否被static修饰，修饰者属于类的调用，否则属于被申请的对象的调用，与之分别对应静态/动态调用。</p>
<p>还有C++/Java层公共数据是什么？C++层的公共数据就是C++里面全局可以访问的变量，而这里的Java层公共变量指的是用C++访问/修改在Java类或者Java对象中的公共变量。</p>
</blockquote>
<h1 id="实例操作">实例操作<a aria-hidden="true" tabindex="-1" href="#实例操作"><span class="anchor-link"> #</span></a></h1>
<p>以下我写了一个demo用于阐述JNI调用的线程安全的问题。</p>
<h2 id="java部分">Java部分<a aria-hidden="true" tabindex="-1" href="#java部分"><span class="anchor-link"> #</span></a></h2>
<p>java部分的代码写得很简单，声明了几个本地JNI接口，并在main中调用之：</p>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">java</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCls</span> {
  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
    <span class="hljs-keyword">if</span> (loadLibrary()) {
      sayHello();

      <span class="hljs-type">ConSt</span> <span class="hljs-variable">st</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConSt</span>();

      threadSafe(st); <span class="hljs-comment">// 只要传进的st唯一即可达到线程安全的要求</span>

      System.out.println(mySafeInt);
      System.out.println(st.mInt);

      System.out.printf(<span class="hljs-string">"unsafe int:%d\n"</span>, threadUnsafe());

      <span class="hljs-type">MyCls</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCls</span>();
      obj.threadUnsafe2();
      System.out.printf(<span class="hljs-string">"unsafe int:%d\n"</span>, obj.myUnsafeInt);
    }
  }

  <span class="hljs-comment">// 加载c动态库</span>
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">loadLibrary</span><span class="hljs-params">()</span> {
    <span class="hljs-keyword">try</span> {
      System.loadLibrary(<span class="hljs-string">"abc"</span>);
    } <span class="hljs-keyword">catch</span>(SecurityException e) {
      e.printStackTrace();
      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    } <span class="hljs-keyword">catch</span>(UnsatisfiedLinkError e) {
      e.printStackTrace();
      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
  }

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">mySafeInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
  <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">myUnsafeInt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;

  <span class="hljs-comment">// 本地化接口</span>
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadSafe</span><span class="hljs-params">(ConSt st)</span>;
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-type">int</span> <span class="hljs-title function_">threadUnsafe</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 使用了C++层的公共变量，且没有加锁机制</span>
  <span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadUnsafe2</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 使用了Java层的公共变量，且没有加锁机制</span>
}
</code></pre></div>
<p>上面的主体部分就是这三个本地调用的使用，<code>threadSafe()</code>实际上可以拆开成两个函数的，注意下面的C++部分的代码，为了省事，我把写在一块了。</p>
<p><code>threadSafe()</code>是线程安全的在任意调用次数后，都会返回正确的结果，而下面的<code>threadUnsafe()</code>和<code>threadUnsafe2()</code>则不是线程安全的，在很多线程执行时会得到混乱的结果。</p>
<h2 id="cc部分">C/C++部分<a aria-hidden="true" tabindex="-1" href="#cc部分"><span class="anchor-link"> #</span></a></h2>
<div class="code-block-wrapper"><div class="code-block-header"><span class="code-block-lang">c++</span><button class="copy-button" data-copy-state="copy" aria-label="Copy code to clipboard" type="button" onclick="copyCode(this)"><span class="copy-button-text">Copy</span></button></div><pre><code class="hljs language-c++">std::mutex mu_thread_safe;

<span class="hljs-comment">/*
 * Class:     MyCls
 * Method:    threadSafe
 * Signature: (LConSt;)V
 */</span>
<span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title">Java_MyCls_threadSafe</span>
  <span class="hljs-params">(JNIEnv *env, jclass clz, jobject cons_st)</span> </span>{
    <span class="hljs-comment">// -- 1 -- 使用C++的互斥锁来阻塞操作，这样可以保证线程安全</span>
    jfieldID _fieldId = env-><span class="hljs-built_in">GetStaticFieldID</span>(clz, <span class="hljs-string">"mySafeInt"</span>, <span class="hljs-string">"J"</span>); <span class="hljs-comment">// 获得类中的静态成员变量</span>

    mu_thread_safe.<span class="hljs-built_in">lock</span>();
    env-><span class="hljs-built_in">SetStaticLongField</span>(clz, _fieldId, <span class="hljs-number">12345</span>); <span class="hljs-comment">// 这里通过互斥锁来达到线程安全</span>
    mu_thread_safe.<span class="hljs-built_in">unlock</span>();

    <span class="hljs-comment">// -- 2 -- 通过形式参数形式传递变量进入，只要保证形参不同即可线程安全</span>
    jclass _cs_clz = env-><span class="hljs-built_in">FindClass</span>(<span class="hljs-string">"ConSt"</span>);
    <span class="hljs-built_in">assert</span>(_cs_clz != <span class="hljs-literal">nullptr</span>);
    jfieldID _cs_fieldId = env-><span class="hljs-built_in">GetFieldID</span>(_cs_clz, <span class="hljs-string">"mInt"</span>, <span class="hljs-string">"J"</span>);
    env-><span class="hljs-built_in">SetLongField</span>(cons_st, _cs_fieldId, <span class="hljs-number">12345</span>);
  }

<span class="hljs-comment">/*
 * Class:     MyCls
 * Method:    threadUnsafe
 * Signature: ()V
 */</span>
<span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">Java_MyCls_threadUnsafe</span>
  <span class="hljs-params">(JNIEnv *, jclass)</span> </span>{
    <span class="hljs-comment">// -- 3 -- 在C++层存储公共数据，并进行改写不加锁，不是线程安全的</span>
    <span class="hljs-type">static</span> <span class="hljs-type">int</span> _unsafe_int = <span class="hljs-number">0</span>;
    _unsafe_int++; <span class="hljs-comment">// 这里不加任何互斥锁机制</span>
    <span class="hljs-keyword">return</span> _unsafe_int;
  }

<span class="hljs-comment">/*
 * Class:     MyCls
 * Method:    threadUnsafe2
 * Signature: ()V
 */</span>
<span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title">Java_MyCls_threadUnsafe2</span>
  <span class="hljs-params">(JNIEnv *env, jobject obj)</span> </span>{
    <span class="hljs-comment">// -- 4 -- 或者C++层操作的公共数据是在java层的变量，亦不加锁，也不是线程安全的</span>
    jclass _clz = env-><span class="hljs-built_in">FindClass</span>(<span class="hljs-string">"MyCls"</span>);
    <span class="hljs-built_in">assert</span>(_clz != <span class="hljs-literal">nullptr</span>);
    jfieldID fieldId = env-><span class="hljs-built_in">GetFieldID</span>(_clz, <span class="hljs-string">"myUnsafeInt"</span>, <span class="hljs-string">"J"</span>);
    <span class="hljs-built_in">assert</span>(fieldId != <span class="hljs-literal">nullptr</span>);
    jlong myUnsafeInt = env-><span class="hljs-built_in">GetLongField</span>(obj, fieldId) + <span class="hljs-number">1</span>;
    env-><span class="hljs-built_in">SetLongField</span>(obj, fieldId, myUnsafeInt);
  }
</code></pre></div>
<p>以上四处标识中，第一个函数<code>threadSafe()</code>处，通过C++的互斥锁来对公共变量修改是一种方案，但是它对于大量并发的操作而言，效率低下，因为它是互斥线性化的，所以一般推荐第二处标识的方案，它让用户传递一个自定义的类型对象，C++层就对这个对象进行修改，调用者负责它传递的对象唯一，那么对于大量的并发操作而言，得到的结果也必然是正确的。</p>
<p>对于第三处和第四处是线程安全要求下不能满足的反例，第三处是没有对C++层公共数据添加加锁机制，而第四处是和第三处类似的，不同之处在于它的修改是在Java代码里的变量。</p>
<blockquote>
<p>关于GetFiledID()的第四个参数<code>sign</code>是什么意思？它是Java代码对这个函数的表述，可以参照下面这张图（还是从别人的那里截图过来的），更多详情可以查找官方文档。</p>
<p><img src="/post/jnithreadsafe/327d2bc302b0.png" alt="sign"></p>
</blockquote>
<h1 id="总结">总结<a aria-hidden="true" tabindex="-1" href="#总结"><span class="anchor-link"> #</span></a></h1>
<p>保证线程安全的要求是对<strong>公共资源</strong>恰当使用，最好不要用公共资源，让调用者传递参数值作为修改变量来使用，效果最佳。</p>
<p>链接：
demo<a href="src.tar.gz">下载</a></p>7:["$","$L15",null,{"postData":{"id":"jnithreadsafe","contentHtml":"$16","title":"JNI函数调用之线程安全问题","date":"$D2021-11-29T23:03:02.000Z","categories":["随笔"],"tags":["jni","java","cpp"]}}]
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"JNI函数调用之线程安全问题"}],["$","meta","1",{"name":"description","content":"HCHEN90 博客"}],["$","link","2",{"rel":"alternate","type":"application/atom+xml","href":"https://hchen90.top/atom.xml"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
