1:"$Sreact.fragment"
2:I[7555,[],""]
3:I[1295,[],""]
4:I[415,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],"default"]
5:I[9243,["766","static/chunks/766-f505dbd3efffaa4c.js","226","static/chunks/226-13d4d3f1fc18ceb6.js","177","static/chunks/app/layout-c0c1784047774695.js"],""]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/283bb1ed86b49fd2.css","style"]
:HL["/_next/static/css/09ec4099fb721b31.css","style"]
:HL["/_next/static/css/09dfadb69bdaa005.css","style"]
6:T4a2,
          function copyCode(button) {
            // Find the code element within the same wrapper
            const codeWrapper = button.closest('.code-block-wrapper');
            if (!codeWrapper) return;
            
            const codeElement = codeWrapper.querySelector('code');
            if (!codeElement) return;
            
            // Get the text content
            const text = codeElement.textContent;
            
            // Use the clipboard API to copy the text
            navigator.clipboard.writeText(text).then(() => {
              // Update the button state to show "Copied!"
              button.setAttribute('data-copy-state', 'copied');
              const buttonText = button.querySelector('.copy-button-text');
              if (buttonText) buttonText.textContent = 'Copied!';
              
              // Reset after 2 seconds
              setTimeout(() => {
                button.setAttribute('data-copy-state', 'copy');
                if (buttonText) buttonText.textContent = 'Copy';
              }, 2000);
            }).catch(err => {
              console.error('Failed to copy text: ', err);
            });
          }
          0:{"P":null,"b":"bvXmrLIJiTuq5pCczDHLW","p":"","c":["","debug",""],"i":false,"f":[[["",{"children":["debug",{"children":["__PAGE__",{}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/283bb1ed86b49fd2.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/09ec4099fb721b31.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","2",{"rel":"stylesheet","href":"/_next/static/css/09dfadb69bdaa005.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"className":"antialiased relative","children":[["$","div",null,{"className":"fixed top-4 right-4 z-50","children":["$","a",null,{"href":"https://github.com/hchen90","target":"_blank","rel":"noopener noreferrer","className":"flex items-center justify-center p-2 bg-white rounded-full shadow-md hover:shadow-lg transition-shadow duration-300","title":"Visit my GitHub profile","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":"24","height":"24","viewBox":"0 0 24 24","fill":"currentColor","children":["$","path",null,{"d":"M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"}]}]}]}],["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":404}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],[]],"forbidden":"$undefined","unauthorized":"$undefined"}],["$","$L4",null,{}],["$","$L5",null,{"id":"code-copy","children":"$6"}]]}]}]]}],{"children":["debug",["$","$1","c",{"children":[null,["$","$L2",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L3",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],null,["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","YU_fhk1bO6djmd6ZbUTYv",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
15:T458c,[
  {
    "id": "llmappfunctioncallingmech",
    "summary": "LLM应用中的Function Calling机制  LLM在当下应用非常广泛，从最常见的聊天问答（例如：Chatgpt，DeekSeek聊天），到基于内容检索的问答系统，处处可见它的身影。  在LLM（大型语言模型）应用开发中，Function Calling（函数调用）是一项强大的机制，它使...",
    "title": "LLM应用中的Function Calling机制",
    "date": "2025-04-20T02:12:08.000Z",
    "updated": "2016-09-20T02:12:08.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "AI",
      "人工智能",
      "LLM"
    ]
  },
  {
    "id": "mltraningfittingissues",
    "summary": "机器学习中模型训练的拟合问题   拟合问题简介  拟合问题可以归纳为模型对数据的规律学得好不好，对于学得好的就称为拟合适中，对于学得不好的可以分类两种：过拟合，欠拟合。  拟合就是用模型函数去逼近数据之间的关系，拟合程度反映了模型函数和实际数据的贴合程度。   过拟合问题  过拟合的意思是模型在...",
    "title": "机器学习中模型训练的拟合问题",
    "date": "2024-09-15T20:03:12.000Z",
    "updated": "2016-09-15T20:03:12.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "AI",
      "人工智能",
      "机器学习"
    ]
  },
  {
    "id": "ai2-studylog-ml",
    "summary": "人工智能 - 机器学习  人工智能的基础是机器学习，顾名思义就是让机器能够处理数据，并在处理的数据中进行学习，从而能够自主地做出决策。简单来说，机器学习是让机器能够在不需要特别编程的情况下进行学习和改进。  而机器学习，大体上分为三种，分别为：监督式学习，无监督式学习，和深度学习。     监督...",
    "title": "人工智能笔记 - 机器学习",
    "date": "2024-07-02T11:36:12.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "人工智能",
      "AI"
    ]
  },
  {
    "id": "ai1-studylog-dataanalysis",
    "summary": "人工智能 - 数据分析和决策  这部分主要分为四个层次：  - 数据收集 - 数据清理 - 数据分析 - 决策     数据收集  在人工智能领域数据收集是至关重要的一个环节，它是用于训练模式的输入来源。  作为基础的概念复习，数据收集无非是把目标进行采样，同时我们需要使用科学的方法使样本接近于...",
    "title": "人工智能笔记 - 数据分析和决策",
    "date": "2024-06-12T21:36:12.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "人工智能",
      "AI"
    ],
    "mathjax": true
  },
  {
    "id": "advlangmemmanagement",
    "summary": "高级语言内存管理那些事：C++、Go 与 Rust 的对决  高级语言C++，Go，和Rust，是三种典型不同的内存管理风格的语言，它的风格也间接展示高级语言的发展历程，其中重要一项就是内存管理的变化。   一、前言：为什么内存管理很重要  内存管理是高级编程语言的基石，它影响程序的性能，安全和...",
    "title": "高级语言内存管理那些事：C++、Go 与 Rust 的对决",
    "date": "2024-04-20T20:14:02.000Z",
    "updated": "2024-04-20T20:14:02.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "C++",
      "Rust",
      "Go"
    ]
  },
  {
    "id": "openaiapirsh",
    "summary": "简介  人工智能并非是一个新鲜事物，早在多年前就就已有 TensorFlow，配合一套数值，矩阵，图形，和相关算法库，就可以实现一个简单的人工智能。  其实人工智能经历了许多年的发展，目前逐渐成熟，平时大众与其在生活的交叉并不多，所以难以引人注目，不过这次的 ChatGPT 展现出它强大的语言功...",
    "title": "OpenAI之OpenAPI初探",
    "date": "2023-03-28T22:11:08.000Z",
    "updated": "2023-03-28T22:11:08.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "OpenAI",
      "AI",
      "ChatGPT"
    ]
  },
  {
    "id": "deploygitlabcerunner",
    "summary": "玩转自搭建 GitLab 社区版  本文的自搭建是基于docker容器技术而实现的，其中包括gitlab-ce和gitlab-runner两个部分。   什么是 GitLab  GitLab是一个代码仓库管理系统（它是一套开源项目），使用 Git 作为代码管理工具，集成 Web 管理的服务，Gi...",
    "title": "玩转自搭建 GitLab 社区版",
    "date": "2022-07-02T10:03:12.000Z",
    "updated": "2022-07-02T10:03:12.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "git",
      "linux"
    ]
  },
  {
    "id": "codemodification",
    "summary": "什么是代码改动  在软件项目中都存在一个生命周期，无论周期长短，都会涉及到代码改动，不管是对以前缺陷的修复，还是在敏捷开发中（每一个故事的迭代），都会或多或少地产生代码修改。     为什么会发生代码改动  代码修改其实是很常见的，但代码修改却是要尽量避免的，我们可以使用极限思维，一种是无比兼容...",
    "title": "程序的代码修改问题",
    "date": "2022-06-11T08:53:02.000Z",
    "updated": "2022-06-11T08:53:02.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "expr"
    ]
  },
  {
    "id": "mongodbcloudcluster",
    "summary": "什么是MongoDB Cloud  MongoDB Cloud 的核心是  ，这是一个适用于现代应用程序的完全托管的云数据库。Atlas 是运行领先的现代数据库 MongoDB 的最佳方式。 的文档模型是一种更快的创新方式，可为数据库带来灵活性和易用性。    这是官网的简介，然后，再看一下它的...",
    "title": "MongoDB Cloud云平台简单使用简介",
    "date": "2022-04-03T14:22:06.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "MongoDB",
      "SQL"
    ]
  },
  {
    "id": "jnithreadsafe",
    "summary": "JNI 开发是什么  因本人以前工作中做过此类工作，再加上老同事的疑问，所以，今天抽出时间来探讨一下JNI的开发问题和特定细节（调用的线程安全问题），其实这种JNI层调用和任何其他语言调用C/C++层结构都差不多，比如说CGO，其涉及到Golang和C/C++层的调用，很多方面都存在类似之处。...",
    "title": "JNI函数调用之线程安全问题",
    "date": "2021-11-29T23:03:02.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "jni",
      "java",
      "cpp"
    ]
  },
  {
    "id": "redistributedservicesystem",
    "summary": "什么是分布式系统  关于分布式系统的定义，应该都不会陌生，它就是一些独立的计算机集合，这些计算机也称为节点，为了完成一项事务，由这一组计算节点协作完成。  而分布式还有另外一个特点，就是用户几乎感知不到它是很多节点来完成一项事务的，甚至可以说，站在用户的角度，它和集中式系统几乎雷同，用户不会觉得...",
    "title": "分布式服务系统概述",
    "date": "2020-12-20T10:05:12.000Z",
    "updated": "2021-11-14T21:16:34.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "SQL",
      "Actor",
      "MongoDB",
      "Redis"
    ]
  },
  {
    "id": "githuboauthappintro",
    "summary": "Github的App有两种，一种是普通的App，一般用以制作自动化机器人，另一种是利用用户登录的App，它可以操作登录用户的Github里面的API定义的操作，包括：用户信息获取，仓库信息修改，用户信息修改，等等。   OAuth2的定义  OAuth（开放授权）是一个开放标准，允许用户授权第三方...",
    "title": "GitHub的OAuth App的使用",
    "date": "2020-04-15T14:23:07.000Z",
    "updated": "2020-04-15T14:23:07.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "github",
      "oauth"
    ]
  },
  {
    "id": "linuxcoredumptofindbug",
    "summary": "什么是coredump？  Coredump是继承于UNIX系统的机制，它用于保存程序出错而崩溃时的栈，内存，PID，UID，GID，时间等等信息的快照，通常用于程序诊断和调试，Coredump的信息在计算机中一般保存三天左右（依系统设定而定），如果出错的程序BUG不及时查找，超过三天系统会吧这...",
    "title": "利用Linux的coredump机制快速定位程序BUG",
    "date": "2019-11-12T09:12:29.000Z",
    "updated": "2019-11-12T09:12:29.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "linux",
      "debug",
      "coredump",
      "gdb",
      "objdump"
    ]
  },
  {
    "id": "linuxstartup",
    "summary": "内核加载  在里面我说明过计算机如何从远古到近代的启动流程，然后，走到操作系统一层的时候就没有深入阐述了，在这篇博文我将以Linux系统为例来叙述操作系统是如何启动的。  通常在系统/boot目录下放着内核文件，如下：  shell initramfs-linux.img vmlinuz-lin...",
    "title": "Linux系统启动流程",
    "date": "2018-06-24T11:50:03.000Z",
    "updated": "2018-06-24T11:50:03.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "linux"
    ]
  },
  {
    "id": "systemstartup",
    "summary": "远古时代   这个时期，计算机是处于电气化高度相关的环境下，几乎没有软件的概念（这里有点瑕疵，稍后补充）。  计算机这个时候会进行一系列针对硬件的自测试，尤其检测一些必要硬件是否可用，这个过程成为POST自检，如果检测通过就会进行下一个步骤：BIOS模式，或者UEFI模式。    > 一般计算机...",
    "title": "计算机系统启动流程",
    "date": "2018-06-16T20:40:10.000Z",
    "updated": "2018-06-16T20:40:10.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "GRUB",
      "UEFI",
      "BIOS"
    ]
  },
  {
    "id": "lzsscompalgo",
    "summary": "LZSS算法简介  LZSS算法是LZ77算法的改良版，由James A. Storer和Thomas Szymacski于1982年发表在ACM杂志上。LZSS算法充分地利用了位的标记，从而使得压缩效率相比较于LZ77而言，有了显著提高。    > 参考维基百科   算法逻辑  在看本篇博文之...",
    "title": "LZSS压缩算法",
    "date": "2018-04-01T21:12:32.000Z",
    "updated": "2018-04-01T21:12:32.000Z",
    "categories": [
      "算法"
    ],
    "tags": [
      "lzss",
      "algorithm"
    ]
  },
  {
    "id": "lz77compalgo",
    "summary": "LZ77算法简介  LZ77算法是一种无损压缩算法，最早由两位以色列人于1977发表，它是一种典型的字典型压缩算法，目前几乎大多数的无损压缩算法都是基于这个LZ77算法，也就是在其基础上优化修改，此算法可以称得上是无损压缩算法界的鼻祖了。    > 参考维基百科   算法逻辑  LZ77的算法核...",
    "title": "LZ77压缩算法",
    "date": "2018-03-31T20:38:24.000Z",
    "updated": "2018-03-31T20:38:24.000Z",
    "categories": [
      "算法"
    ],
    "tags": [
      "lz77",
      "algorithm"
    ]
  },
  {
    "id": "enablesbonlinux",
    "summary": "概述  Secure Boot 作为 UEFI 的一个选项，它可以被设置为开启或关闭 ( 有少数的计算机里面， Secure Boot 被设置为开启，却不存在关闭它的选项，但系统主板内置有 Windows 系统的公钥证书签名，使其只能加载 Windows ，其他系统一律不以加载，用户没有选项，不...",
    "title": "如何在 Linux 系统启用 UEFI 的 Secure Boot",
    "date": "2017-09-02T00:17:02.000Z",
    "updated": "2017-09-02T00:17:02.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "linux",
      "uefi",
      "openssl"
    ]
  },
  {
    "id": "linuxsystemasyncio",
    "summary": "Linux系统中的异步I/O问题  系统编程中，I/O（输入/输出）模型决定了如何和数据进行交互，它对整个系统性能影响至关重要。I/O模型会直接影响如下几大方面：   吞吐量  机器资源利用率，例如：CPU使用率  系统的可拓展性  编程复杂性  I/O模型在网络编程中，是高性能服务器的基础，如...",
    "title": "Linux系统中的异步I/O问题",
    "date": "2017-07-08T00:02:11.000Z",
    "updated": "2017-07-08T00:02:11.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "linux"
    ]
  },
  {
    "id": "softwaredesignpattern4",
    "summary": "软件设计模式 - 行为模式  行为模式负责对象之间的高效沟通和职责委派。  行为模式包括：责任链，命令，迭代器，中介者，备忘录，观察者，状态，策略，模版方法，访问者。     责任链模式（Chain of Responsibility/CoR）  责任链模式允许你将请求沿着处理者链进行传递。每个...",
    "title": "软件设计模式 - 行为模式",
    "date": "2017-06-08T22:01:03.000Z",
    "updated": "2024-10-08T20:15:08.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "设计模式"
    ]
  },
  {
    "id": "softwaredesignpattern3",
    "summary": "软件设计模式 - 结构型模式  结构型模式介绍类和对象的组装方式，同时保持较大的灵活性和高效性。  结构型模式包括：适配器，桥接，组合，装饰，外观，享元，代理。     适配器模式（Adapter）  适配器模式是为了解决不同接口之间的适配问题。  适配器通常分为两类：对象适配器，类适配器。...",
    "title": "软件设计模式 - 结构型模式",
    "date": "2017-06-05T21:11:12.000Z",
    "updated": "2017-06-05T21:11:12.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "设计模式"
    ]
  },
  {
    "id": "softwaredesignpattern2",
    "summary": "软件设计模式 - 创建型模式  创建型模式分为：工厂方法，抽象工厂，生成器，原型，单例。     工厂方法模式（Factory Method）  工厂方法模式是一种在父类声明方法，在子类实例化该对象的方法。在C++中通常以虚函数形式来表示，在其他语言，例如Java中则是抽象函数来表示。  工厂方...",
    "title": "软件设计模式 - 创建型模式",
    "date": "2017-06-04T19:04:11.000Z",
    "updated": "2017-06-04T19:04:11.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "设计模式"
    ]
  },
  {
    "id": "softwaredesignpattern1",
    "summary": "软件设计模式简介  软件设计模式属于软件工程领域的解决问题的基本方法，它提供了一种合理地达成目标的处理步骤。本文主要简单提出为何需要它，它的作用，以及它的主要组成元素。     什么是软件设计模式  软件设计模式其实就是为了解决问题，而制定的一种抽象层面的合理地达到目标的处理步骤。  设计模式的...",
    "title": "软件设计模式简介",
    "date": "2017-06-02T20:12:01.000Z",
    "updated": "2017-06-02T20:12:01.000Z",
    "categories": [
      "总结"
    ],
    "tags": [
      "设计模式"
    ]
  },
  {
    "id": "minix",
    "summary": "问题来源  直接在虚拟机MINIX中阅读它的源代码，十分不便，修改调试做移植也非常困难，如果将MINIX系统中的部分源代码拷贝到实体机LINUX中，在LINUX系统中进行修改调试将会非常方便。  然而，MINIX系统是一种比较基本的系统，不能像vmware中使用Windows类系统那样，直接给它...",
    "title": "如何将处于虚拟机中的MINIX系统中的文件复制到实体机的LINUX系统中来",
    "date": "2016-10-03T00:16:13.000Z",
    "updated": "2016-10-03T00:16:13.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "minix",
      "qemu"
    ]
  },
  {
    "id": "linuxlatex",
    "summary": "TeX系统简介  TeX系统最早由Stanford大学教授Donald E. Kunth制成的计算机排版软件系统，大家对他的《The Art of Computer Programming》应该不会陌生。  实际上，TeX的制成正是由于上述的书出版样本，令他不满意，所以激发了他创制了TeX排版系...",
    "title": "Linux环境搭建中文LaTeX排版系统",
    "date": "2016-05-03T04:12:20.000Z",
    "updated": "2016-05-03T04:12:20.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "linux",
      "latex"
    ]
  },
  {
    "id": "vssqlserver2008",
    "summary": "SQL Server是微软的数据库产品，也是一个较为众所周知的数据库产品，其中SQL Server 2000深受广大的用户的青睐，知名度较高，SQL Server 2008是其的后继产品之一，废话不多说了（本文不讨论VS或SQL Server的安装，假设预制环境就绪）。  首先在菜单的视图->其他...",
    "title": "如何在Visual Studio 2010中使用SQL Server 2008",
    "date": "2014-08-02T12:54:52.000Z",
    "updated": "2014-08-02T12:54:52.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "SQL"
    ]
  },
  {
    "id": "mspeshell",
    "summary": "简介  今天来讨论一下PE文件的壳，壳主要用于PE文件的商业保护，以此达到软件不被暴掉的可能性，随着破解知识的普及，软件的壳也愈加复杂才可勉强不被暴。  壳的一个加载过程在许多书上都将过，这里就以图来复习一次：    !  这张图其实是一种情形，原程序被压缩引擎压过，还可以是在EXE文件上直接加...",
    "title": "PE文件壳的设计过程",
    "date": "2013-10-26T23:44:15.000Z",
    "updated": "2013-10-26T23:44:15.000Z",
    "categories": [
      "随笔"
    ],
    "tags": [
      "Windows",
      "EXE"
    ]
  }
]7:["$","div",null,{"className":"p-8","children":[["$","h1",null,{"className":"text-3xl font-bold mb-6","children":"调试页面"}],["$","div",null,{"className":"bg-gray-100 p-4 rounded mb-6","children":[["$","h2",null,{"className":"text-xl mb-4","children":["已加载的文章数量: ",27]}],["$","pre",null,{"className":"bg-white p-4 rounded overflow-auto max-h-96","children":"$15"}]]}]]}]
c:null
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"HCHEN90 博客"}],["$","meta","1",{"name":"description","content":"HCHEN90 博客"}],["$","link","2",{"rel":"alternate","type":"application/atom+xml","href":"https://hchen90.top/atom.xml"}],["$","link","3",{"rel":"icon","href":"/favicon.ico","type":"image/x-icon","sizes":"16x16"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
