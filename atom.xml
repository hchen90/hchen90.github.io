<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>个人站点</title>
  
  <subtitle>陈祥的个人站点</subtitle>
  <link href="https://hchen90.github.io/atom.xml" rel="self"/>
  
  <link href="https://hchen90.github.io/"/>
  <updated>2019-11-12T01:12:29.000Z</updated>
  <id>https://hchen90.github.io/</id>
  
  <author>
    <name>陈祥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>利用Linux的coredump机制快速定位程序BUG</title>
    <link href="https://hchen90.github.io/2019/11/12/linuxcoredumptofindbug/"/>
    <id>https://hchen90.github.io/2019/11/12/linuxcoredumptofindbug/</id>
    <published>2019-11-12T01:12:29.000Z</published>
    <updated>2019-11-12T01:12:29.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;什么是coredump？&quot;&gt;&lt;a href=&quot;#什么是coredump？&quot; class=&quot;headerlink&quot; title=&quot;什么是coredump？&quot;&gt;&lt;/a&gt;什么是coredump？&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Coredump&lt;/strong&gt;是继承于UNIX系统的机制，它用于保存程序出错而崩溃时的栈，内存，PID，UID，GID，时间等等信息的快照，通常用于程序诊断和调试，&lt;strong&gt;Coredump&lt;/strong&gt;的信息在计算机中一般保存三天左右（依系统设定而定），如果出错的程序BUG不及时查找，超过三天系统会吧这些&lt;strong&gt;Coredump&lt;/strong&gt;删除。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://hchen90.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="linux" scheme="https://hchen90.github.io/tags/linux/"/>
    
    <category term="debug" scheme="https://hchen90.github.io/tags/debug/"/>
    
    <category term="coredump" scheme="https://hchen90.github.io/tags/coredump/"/>
    
    <category term="gdb" scheme="https://hchen90.github.io/tags/gdb/"/>
    
    <category term="objdump" scheme="https://hchen90.github.io/tags/objdump/"/>
    
  </entry>
  
  <entry>
    <title>如何在 Linux 系统启用 UEFI 的 Secure Boot</title>
    <link href="https://hchen90.github.io/2017/09/02/enablesbonlinux/"/>
    <id>https://hchen90.github.io/2017/09/02/enablesbonlinux/</id>
    <published>2017-09-01T16:17:02.000Z</published>
    <updated>2017-09-01T16:17:02.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Secure Boot 作为 UEFI 的一个选项，它可以被设置为开启或关闭 ( 有少数的计算机里面， Secure Boot 被设置为开启，却不存在关闭它的选项，但系统主板内置有 Windows 系统的公钥证书签名，使其只能加载 Windows ，其他系统一律不以加载，用户没有选项，不能关闭，还没法换系统，无法适用本博客介绍内容）。 Secure Boot 所需要的公钥证书被保存在计算机的主板的 FLASH 里面（注意不是磁盘里面哦），在主板的一小块 FLASH 里面保存着 PK ， KEK， db， dbx 的证书链，所以， &lt;strong&gt;在操作开始前请确保你的计算机 UEFI-BIOS 的 Secure Boot 能够被关闭，否则，发生操作失误，将导致证书不能匹配任何程序代码文件，而使主板拒绝加载任何程序代码文件，就会导致主板变砖&lt;/strong&gt; (虽然它不是 BIOS ，但是许多人都这么称呼它为 UEFI-BIOS ，所以，这里也这么称呼其为 UEFI-BIOS) 。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://hchen90.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="linux" scheme="https://hchen90.github.io/tags/linux/"/>
    
    <category term="uefi" scheme="https://hchen90.github.io/tags/uefi/"/>
    
    <category term="openssl" scheme="https://hchen90.github.io/tags/openssl/"/>
    
  </entry>
  
  <entry>
    <title>如何将处于虚拟机中的MINIX系统中的文件复制到实体机的LINUX系统中来</title>
    <link href="https://hchen90.github.io/2016/10/03/minix/"/>
    <id>https://hchen90.github.io/2016/10/03/minix/</id>
    <published>2016-10-02T16:16:13.000Z</published>
    <updated>2016-10-02T16:16:13.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;问题来源&quot;&gt;&lt;a href=&quot;#问题来源&quot; class=&quot;headerlink&quot; title=&quot;问题来源&quot;&gt;&lt;/a&gt;问题来源&lt;/h2&gt;&lt;p&gt;直接在虚拟机MINIX中阅读它的源代码，十分不便，修改调试做移植也非常困难，如果将MINIX系统中的部分源代码拷贝到实体机LINUX中，在LINUX系统中进行修改调试将会非常方便。&lt;/p&gt;
&lt;p&gt;然而，MINIX系统是一种比较基本的系统，不能像vmware中使用Windows类系统那样，直接给它装VMTools（因为缺失XWindows，虽然理论上可以给MINIX装个XWindows，但是，太麻烦，而且仅仅为了几个源代码，有点大途小用）。因为vmware的磁盘文件（&lt;code&gt;.vmdk&lt;/code&gt;）不是原始的磁盘数据文件，而且，vmware对据如MINIX这些生僻系统的文件系统的识别性不是太理想，造成用vmware无法挂载MINIX系统到实体主机上，仍然复制不到虚拟机中的MINIX的文件。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://hchen90.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="minix" scheme="https://hchen90.github.io/tags/minix/"/>
    
    <category term="qemu" scheme="https://hchen90.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>Linux环境搭建中文LaTeX排版系统</title>
    <link href="https://hchen90.github.io/2016/05/03/linuxlatex/"/>
    <id>https://hchen90.github.io/2016/05/03/linuxlatex/</id>
    <published>2016-05-02T20:12:20.000Z</published>
    <updated>2016-05-02T20:12:20.000Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;TeX系统简介&quot;&gt;&lt;a href=&quot;#TeX系统简介&quot; class=&quot;headerlink&quot; title=&quot;TeX系统简介&quot;&gt;&lt;/a&gt;TeX系统简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;TeX&lt;/strong&gt;系统最早由Stanford大学教授Donald E. Kunth制成的计算机排版软件系统，大家对他的《The Art of Computer Programming》应该不会陌生。&lt;/p&gt;
&lt;p&gt;实际上，TeX的制成正是由于上述的书出版样本，令他不满意，所以激发了他创制了TeX排版系统。正所谓：一个确定性的需求比十所大学更能把握前进的方向。&lt;/p&gt;
&lt;p&gt;大家可能经常以据如MS Word等这类简单排版的所见即所得的软件，或者在Linux中以LibreOffice中的Word这样的软件，来完成文字排版等操作，但是对于论文，书籍这样的文档，和TeX相比，MS Word这些软件就成了小儿科了。&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://hchen90.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="linux" scheme="https://hchen90.github.io/tags/linux/"/>
    
    <category term="latex" scheme="https://hchen90.github.io/tags/latex/"/>
    
  </entry>
  
  <entry>
    <title>如何在Visual Studio 2010中使用SQL Server 2008</title>
    <link href="https://hchen90.github.io/2014/08/02/vssqlserver2008/"/>
    <id>https://hchen90.github.io/2014/08/02/vssqlserver2008/</id>
    <published>2014-08-02T04:54:52.000Z</published>
    <updated>2014-08-02T04:54:52.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;SQL Server是微软的数据库产品，也是一个较为众所周知的数据库产品，其中SQL Server 2000深受广大的用户的青睐，知名度较高，SQL Server 2008是其的后继产品之一，废话不多说了（本文不讨论VS或SQL Server的安装，假设预制环境就绪）。&lt;/p&gt;
&lt;p&gt;首先在菜单的&lt;code&gt;视图&lt;/code&gt;-&amp;gt;&lt;code&gt;其他窗口&lt;/code&gt;-&amp;gt;&lt;code&gt;服务器资源管理器&lt;/code&gt;，打开一个小的浮动窗口，就像这个样：&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://hchen90.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="SQL" scheme="https://hchen90.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>PE文件壳的设计过程</title>
    <link href="https://hchen90.github.io/2013/10/26/mspeshell/"/>
    <id>https://hchen90.github.io/2013/10/26/mspeshell/</id>
    <published>2013-10-26T15:44:15.000Z</published>
    <updated>2013-10-26T15:44:15.000Z</updated>
    
    
    <summary type="html">&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;今天来讨论一下PE文件的壳，壳主要用于PE文件的商业保护，以此达到软件不被暴掉的可能性，随着破解知识的普及，软件的壳也愈加复杂才可勉强不被暴。&lt;/p&gt;
&lt;p&gt;壳的一个加载过程在许多书上都将过，这里就以图来复习一次：&lt;/p&gt;</summary>
    
    
    
    <category term="随笔" scheme="https://hchen90.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="Windows" scheme="https://hchen90.github.io/tags/Windows/"/>
    
    <category term="EXE" scheme="https://hchen90.github.io/tags/EXE/"/>
    
  </entry>
  
</feed>
